### VASP 5.3.5 makefile 
### Modified by D. Chin <dwc62@drexel.edu> to use more up-to-date constructs.
### Bonus: parallel build now works.
### Caveat: relies on source files not distributed with VASP, and a modified main.F
###
### Build tested with;
### * Intel Composer XE 2015.1.133
### * Intel MKL 11.2
### * OpenMPI 1.8.1 w/ Mellanox OFED 1.9

### XXX cannot use parallel build because there are unstated dependencies
###     of .F files on .mod files, so build order is order of listing in 
###     the macro SOURCE
.NOTPARALLEL : 

### Replace suffix rules with pattern rules. --dwc62

# cancel default patterns
%.o : %.F

%.o : %.f90
	$(FC) $(FFLAGS) $(OFLAG) $(FFTW3INC) -c $<

%.f90 : %.F
	./preprocess < $< | $(CPP) $(CPPFLAGS) > $@

%.o : %.c
	$(CC) $(OFLAG) -c $<

# all CPP processed fortran files have the extension .f90
SUFFIX=.f90

CC = mpicc
FC = mpifort
FCL = $(FC)

FFLAGS       = -free -names lowercase
OFLAG        = -O0 -xHost
NO_OPTIMIZE0 = -O0 -xHost
NO_OPTIMIZE1 = -O1 -xHost
NO_OPTIMIZE2 = -O2 -xHost

### XXX This needs to be a preprocessor which defaults to taking stdin. So,
###     using "icc -E" or "gcc -E" does not seem to work.
CPP = cpp
CPPFLAGS = -P -C -traditional -DMPI -DHOST=\"LinuxIFC\" -DIFC \
	-DCACHE_SIZE=12000 \
	-DMPI_BLOCK=500 -DscaLAPACK \
	-DRPROMU_DGEMV -DRACCMU_DGEMV -Davoidalloc

INC  =
LINK = 

#-----------------------------------------------------------------------
# additional options for CPP in parallel version (see also above):
# NGZhalf             charge density   reduced in Z direction
# wNGZhalf            gamma point only reduced in Z direction
# scaLAPACK           use scaLAPACK (recommended if mkl is available)
# avoidalloc          avoid ALLOCATE if possible
# PGF90               work around some for some PGF90 / IFC bugs
# CACHE_SIZE          1000 for PII,PIII, 5000 for Athlon, 8000-12000 P4, PD
# RPROMU_DGEMV        use DGEMV instead of DGEMM in RPRO (depends on used BLAS)
# RACCMU_DGEMV        use DGEMV instead of DGEMM in RACC (depends on used BLAS)
# tbdyn                 MD package of Tomas  Bucko
#-----------------------------------------------------------------------


#-----------------------------------------------------------------------
# location of SCALAPACK
# if you do not use SCALAPACK simply leave this section commented out
#-----------------------------------------------------------------------

# Refer to the MKL Link Line Advisor
SCA =  $(MKLROOT)/lib/intel64/libmkl_blas95_lp64.a \
	$(MKLROOT)/lib/intel64/libmkl_lapack95_lp64.a \
	-Wl,-rpath,$(MKLROOT)/lib/intel64 -L$(MKLROOT)/lib/intel64 \
	-lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_core \
	-lmkl_sequential -lmkl_blacs_intelmpi_lp64 -lpthread -lm

#-----------------------------------------------------------------------
# libraries
#-----------------------------------------------------------------------

# this assumes the vasp.5.lib makefile has been fixed to put linpack_double.o 
# into libdmy.a
LIB = -L../vasp.5.lib -ldmy $(SCA) $(LAPACK) $(BLAS)

#-----------------------------------------------------------------------
# parallel FFT
#-----------------------------------------------------------------------

# FFT: fftmpi.o with fft3dlib of Juergen Furthmueller
#FFT3D   = fftmpi.o fftmpi_map.o fft3dfurth.o fft3dlib.o 

# alternatively: fftw.3.1.X is slighly faster and should be used if available
#FFT3D   = fftmpiw.o fftmpi_map.o fftw3d.o fft3dlib.o  /opt/libs/fftw-3.1.2/lib/libfftw3.a

# you may also try to use the fftw wrapper to mkl (but the path might vary a lot)
# it seems this is best for AMD based systems
#FFT3D   = fftmpiw.o fftmpi_map.o  fftw3d.o  fft3dlib.o   $(MKL_FFTW_PATH)/libfftw3xf_intel.a

FFT3D = fftmpiw.o fftmpi_map.o fftw3d.o fft3dlib.o $(MKLROOT)/lib/intel64/libfftw3xf_intel.a
FFTW3INC = -I$(MKLROOT)/include/fftw 

#-----------------------------------------------------------------------
# general rules and compile lines
#-----------------------------------------------------------------------
all: vasp

### These source files:
### * main.F - modified version of main.F to call stacksize() to set stack limit
### * stacksize.c - contains routine stacksize() to set stack limit
### * fftw3.f - Intel MKL's FFTW3 Fortran interface, typically $(MKLROOT)/include/fftw/fftw3.f
### --dwc62

EXTSRC = main.F stacksize.c preprocess fftw3.f

main.F : ../main.F
	-/bin/cp -f $< $@

stacksize.c : ../stacksize.c
	-/bin/cp -f $< $@

preprocess : ../preprocess
	-/bin/cp -f $< $@

fftw3.f : $(MKLROOT)/include/fftw/fftw3.f
	-/bin/cp -f $< $@

BASIC=   symmetry.o symlib.o   lattlib.o  random.o   

SOURCE=  base.o     mpi.o      smart_allocate.o      xml.o  \
         constant.o jacobi.o   main_mpi.o  scala.o   \
         asa.o      lattice.o  poscar.o   ini.o  mgrid.o  xclib.o  vdw_nl.o  xclib_grad.o \
         radial.o   pseudo.o   gridq.o     ebs.o  \
         mkpoints.o wave.o     wave_mpi.o  wave_high.o  spinsym.o \
         $(BASIC)   nonl.o     nonlr.o    nonl_high.o dfast.o    choleski2.o \
         mix.o      hamil.o    xcgrad.o   xcspin.o    potex1.o   potex2.o  \
         constrmag.o cl_shift.o relativistic.o LDApU.o \
         paw_base.o metagga.o  egrad.o    pawsym.o   pawfock.o  pawlhf.o   rhfatm.o  hyperfine.o paw.o   \
         mkpoints_full.o       charge.o   Lebedev-Laikov.o  stockholder.o dipol.o    pot.o \
         dos.o      elf.o      tet.o      tetweight.o hamil_rot.o \
         chain.o    dyna.o     k-proj.o    sphpro.o    us.o  core_rel.o \
         aedens.o   wavpre.o   wavpre_noio.o broyden.o \
         dynbr.o    hamil_high.o  rmm-diis.o reader.o   writer.o   tutor.o xml_writer.o \
         brent.o    stufak.o   fileio.o   opergrid.o stepver.o  \
         chgloc.o   fast_aug.o fock_multipole.o  fock.o  mkpoints_change.o sym_grad.o \
         mymath.o   internals.o npt_dynamics.o   dynconstr.o dimer_heyden.o dvvtrajectory.o subdftd3.o \
         vdwforcefield.o nmr.o      pead.o     subrot.o   subrot_scf.o  paircorrection.o \
         force.o    pwlhf.o    gw_model.o optreal.o  steep.o    davidson.o  david_inner.o \
         electron.o rot.o  electron_all.o shm.o    pardens.o  \
         optics.o   constr_cell_relax.o   stm.o    finite_diff.o elpol.o    \
         hamil_lr.o rmm-diis_lr.o  subrot_cluster.o subrot_lr.o \
         lr_helper.o hamil_lrf.o   elinear_response.o ilinear_response.o \
         linear_optics.o \
         setlocalpp.o  wannier.o electron_OEP.o electron_lhf.o twoelectron4o.o \
         gauss_quad.o m_unirnk.o minimax_tabs.o minimax.o \
         mlwf.o     ratpol.o screened_2e.o wave_cacher.o chi_base.o wpot.o \
         local_field.o ump2.o ump2kpar.o fcidump.o ump2no.o \
         bse_te.o bse.o acfdt.o chi.o sydmat.o \
         lcao_bare.o wnpr.o dmft.o \
         rmm-diis_mlr.o  linear_response_NMR.o wannier_interpol.o linear_response.o  auger.o getshmem.o \
         dmatrix.o stacksize.o

clean:	
	-/bin/rm -f $(EXTSRC) *.g *.f *.f90 *.o *.L *.mod vasp


vasp: $(EXTSRC) $(SOURCE) $(FFT3D) main.o 
	$(FCL) -o $@ $^ $(LINK) $(LIB)

makeparam: $(SOURCE) $(FFT3D) makeparam.o
	$(FCL) -o $@  $^  $(LINK) $(LIB)

zgemmtest: zgemmtest.o base.o random.o $(INC)
	$(FCL) -o $@ $^ $(LINK) $(LIB)

dgemmtest: dgemmtest.o base.o random.o $(INC)
	$(FCL) -o $@ $(LINK) $^ $(LINK) $(LIB) 

ffttest: base.o smart_allocate.o mpi.o mgrid.o random.o ffttest.o $(FFT3D) $(INC)
	$(FCL) -o $@ $^ $(LINK) $(LIB)

kpoints: $(SOURCE) $(FFT3D) makekpoints.o $(INC)
	$(FCL) -o $@ $^ $(LINK) $(LIB)

#main.o: main$(SUFFIX)
#	$(FC) $(FFLAGS) $(DEBUG)  $(FFTW3INC) -c main$(SUFFIX)

#xcgrad.o: xcgrad$(SUFFIX)
#	$(FC) $(FFLAGS) $(INLINE) $(FFTW3INC) -c xcgrad$(SUFFIX)

#xcspin.o: xcspin$(SUFFIX)
#	$(FC) $(FFLAGS) $(INLINE)  $(FFTW3INC) -c xcspin$(SUFFIX)

#makeparam.o: makeparam$(SUFFIX)
#	$(FC) $(FFLAGS) $(DEBUG)  $(FFTW3INC) -c makeparam$(SUFFIX)

#makeparam$(SUFFIX): makeparam.F main.F 

#
# MIND: I do not have a full dependency list for the include
# and MODULES: here are only the minimal basic dependencies
# if one strucuture is changed then touch_dep must be called
# with the corresponding name of the structure
#
#base.o: base.inc base.F
#mgrid.o: mgrid.inc mgrid.F
#constant.o: constant.inc constant.F
#lattice.o: lattice.inc lattice.F
#setex.o: setexm.inc setex.F
#pseudo.o: pseudo.inc pseudo.F
#mkpoints.o: mkpoints.inc mkpoints.F
#wave.o: wave.F
#nonl.o: nonl.inc nonl.F
#nonlr.o: nonlr.inc nonlr.F



# special rules
#-----------------------------------------------------------------------
# these special rules have been tested for ifc.11 and ifc.12 only

fft3dlib.o : fft3dlib.f90
	$(FC) $(FFLAGS) $(NO_OPTIMIZE2) -c $^

fft3dfurth.o : fft3dfurth.f90
	$(FC) $(FFLAGS) $(NO_OPTIMIZE1) -c $^

fftw3d.o : fftw3d.f90
	$(FC) $(FFLAGS) $(NO_OPTIMIZE1) $(FFTW3INC) -c $^
	
#fftmpi.o : fftmpi.F
#	$(FC) $(FFLAGS) $(NO_OPTIMIZE1) -c $^

#fftmpiw.o : fftmpiw.F
#	$(FC) $(FFLAGS) $(NO_OPTIMIZE1)  $(FFTW3INC) -c $^

#wave_high.o : wave_high.F
#	$(FC) $(FFLAGS) $(NO_OPTIMIZE1) -c $^

### XXX
fftmpi.o : fftmpi.f90
	$(FC) $(FFLAGS) $(NO_OPTIMIZE1) -c $^

fftmpiw.o : fftmpiw.f90
	$(FC) $(FFLAGS) $(NO_OPTIMIZE1)  $(FFTW3INC) -c $^

wave_high.o wave.mod : wave_high.f90
	$(FC) $(FFLAGS) $(NO_OPTIMIZE1) -c $^



# the following rules are probably no longer required (-O3 seems to work)
#wave.o : wave.F
#	$(CPP)
#	$(FC) -FR -names lowercase -O2 -c $*$(SUFFIX)
#paw.o : paw.F
#	$(CPP)
#	$(FC) -FR -names lowercase -O1 -c $*$(SUFFIX)
#cl_shift.o : cl_shift.F
#	$(CPP)
#	$(FC) -FR -names lowercase -O2 -c $*$(SUFFIX)
#us.o : us.F
#	$(CPP)
#	$(FC) -FR -names lowercase -O1 -c $*$(SUFFIX)
#LDApU.o : LDApU.F
#	$(CPP)
#	$(FC) -FR -names lowercase -O2 -c $*$(SUFFIX)

